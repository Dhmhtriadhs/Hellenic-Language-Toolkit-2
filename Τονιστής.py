class Τονιστής:
	def __init__(self):
		self.αντιστοιχίες = {
			'ς':'σ', 'ϐ':'β', 'ϑ':'θ', 'ϒ':'Υ', 'ϓ':'Ύ', 'ϔ':'Ϋ', 'ϕ':'Φ', 'Ϛ':'σ', 'ϛ':'σ',
			'ϰ':'κ', 'ϱ':'ρ', 'ϲ':'σ', 'ϴ':'θ', 'ϵ':'ε', 'Ϲ':'Σ', 'Ϻ':'Μ', 'ϻ':'Μ', 'ϼ':'ρ',
			'ᾰ':'α', 'ᾱ':'α', 'Ᾰ':'Α', 'Ᾱ':'Α', 'Ῐ':'Ι', 'Ῑ':'Ι', 'Ῠ':'Υ', 'Ῡ':'Υ', 'ῠ':'υ',
			'ῡ':'υ', 'ῐ':'ι', 'ῑ':'ι',
			# περίεργα
			'ΐ':'ΐ', 'Ί':'Ί', 'ΰ':'ΰ', 'Ύ':'Ύ', 'έ':'έ',
			'ί':'ί', 'ύ':'ύ', 'Ώ':'Ώ', 'ά':'ά', 'ή':'ή', "ή":"ή",
			'ό':'ό', 'ώ':'ώ', 'Ό':'Ό', 'Ά':'Ά', 'Έ':'Έ',
			'Ή':'Ή',
			# αγγλικά
			'E':'Ε', 'T':'Τ', 'Y':'Υ', "H":"Η", 'I':'Ι', 'O':'Ο', 'A':'Α',
			'H':'Η', 'K':'Κ',
			'Z':'Ζ', 'X':'Χ', 'B':'Β', 'N':'Ν', 'M':'Μ', 'o':'ο', 'v':'ν',
			'i':'ι', 'h':'η', 'a':'α', 'x':'χ',
			# greeklish
			't':'τ', 'k':'κ', 'z':'ζ', 's':'σ', 'd':'δ', 'r':'ρ', 'b':'β',
			"e":"ε", "r":"ρ", "t":"τ", "y":"υ", "u":"θ", "p":"π",
			"s":"σ", "d":"δ", "f":"φ", "g":"γ", "j":"ξ", "k":"κ", "l":"λ",
			"z":"ζ", "c":"ψ", "v":"ω", "b":"β", "n":"ν", "m":"μ", 
			
			"R":"Ρ", "U":"Θ", "P":"Π",
			"S":"Σ", "D":"Δ", "F":"Φ", "G":"Γ", "J":"Ξ", "L":"Λ",
			"C":"Ψ", "V":"Ω",
			
			# ιαπωνικά
			'ア':'Α', 'あ':'α',
			}
		self.τόνο_άτονο = {
			"έ":"ε","ύ":"υ","ί":"ι","ό":"ο","ά":"α","ή":"η",
			"ώ":"ω","ΰ":"ϋ","ΐ":"ϊ",		}
		self.άτονο_τόνο = {
			1:{"ε":"έ","υ":"ύ","ι":"ί","ο":"ό","α":"ά","η":"ή","ω":"ώ","ϋ":"ΰ","ϊ":"ΐ",
				  "ἐ":"ἔ","ὐ":"ὔ","ἰ":"ἴ","ὀ":"ὄ","ἀ":"ἄ","ἠ":"ἤ","ὠ":"ὤ",
				  "ἑ":"ἕ","ὑ":"ὕ","ἱ":"ἵ","ὁ":"ὅ","ἁ":"ἅ","ἡ":"ἥ","ὡ":"ὥ",				  },
			2:{"ε":"έ","υ":"ῦ","ι":"ῖ","ο":"ό","α":"ᾶ","η":"ῆ","ω":"ῶ","ϋ":"ῧ","ϊ":"ῗ",
				  "ἐ":"ἔ","ὐ":"ὖ","ἰ":"ἶ","ὀ":"ὄ","ἀ":"ἆ","ἠ":"ἦ","ὠ":"ὦ",
				  "ἑ":"ἕ","ὑ":"ὗ","ἱ":"ἷ","ὁ":"ὅ","ἁ":"ἇ","ἡ":"ἧ","ὡ":"ὧ",
			},
			3:{"ε":"ὲ","υ":"ὺ","ι":"ὶ","ο":"ὸ","α":"ὰ","η":"ὴ","ω":"ὼ","ϋ":"ῢ","ϊ":"ῒ",
				  "ἐ":"ἒ","ὐ":"ὒ","ἰ":"ἲ","ὀ":"ὂ","ἀ":"ἂ","ἠ":"ἢ","ὠ":"ὢ",
				  "ἑ":"ἓ","ὑ":"ὓ","ἱ":"ἳ","ὁ":"ὃ","ἁ":"ἃ","ἡ":"ἣ","ὡ":"ὣ",
			}
			}
		self.απλοποιήσεις = {
			2:{
			"αυ":"αβ","ευ":"εβ","ει":"ι","οι":"ι","ου":"ο","υι":"ι","αι":"ε",
			"αϋ":"αι","εϋ":"ει","εϊ":"ει","οϊ":"οι","οϋ":"οι","υϊ":"ι","αϊ":"αι",
			"ηυ":"ι","ζμ":"σμ","χτ":"κτ",
			},
			1:{
				"υ":"ι","η":"ι","ω":"ο","ξ":"κσ","ψ":"πσ","ς":"σ",
			}
			}
		self.μονοτονικά = {
			'α':"α",'ᾳ':"α",'ά':"ά",'ᾴ':"ά",'ὰ':"ά",
			'ᾲ':"ά",'ᾶ':"ά",'ᾷ':"ά",'ἁ':"α",'ᾁ':"α",
			'ἅ':"ά",'ᾅ':"ά",'ἃ':"ά",'ᾃ':"ά",'ἇ':"ά",
			'ᾇ':"ά",'ἀ':"α",'ᾀ':"α",'ἄ':"ά",'ᾄ':"ά",
			'ἂ':"ά",'ᾂ':"ά",'ἆ':"ά",'ᾆ':"ά",
			'ε':"ε",'έ':"έ",'ὲ':"έ",'ἑ':"ε",'ἕ':"έ",
			'ἓ':"έ",'ἐ':"ε",'ἔ':"έ",'ἒ':"έ",
			'η':"η",'ῃ':"η",'ή':"ή",'ῄ':"ή",'ὴ':"ή",
			'ῂ':"ή",'ῆ':"ή",'ῇ':"ή",'ἡ':"η",'ᾑ':"η",
			'ἥ':"ή",'ᾕ':"ή",'ἣ':"ή",'ᾓ':"ή",'ἧ':"ή",
			'ᾗ':"ή",'ἠ':"η",'ᾐ':"η",'ἤ':"ή",'ᾔ':"ή",
			'ἢ':"ή",'ᾒ':"ή",'ἦ':"ή",'ᾖ':"ή",
			'ι':"ι",'ί':"ί",'ὶ':"ί",'ῖ':"ί",'ϊ':"ϊ",
			'ΐ':"ΐ",'ῒ':"ΐ",'ῗ':"ΐ",'ἱ':"ι",'ἵ':"ί",
			'ἳ':"ί",'ἷ':"ί",'ἰ':"ι",'ἴ':"ί",'ἲ':"ί",
			'ἶ':"ί",
			'ο':"ο",'ό':"ό",'ὸ':"ό",'ὁ':"ο",'ὅ':"ό",
			'ὃ':"ό",'ὀ':"ο",'ὄ':"ό",'ὂ':"ό",
			'ρ':"ρ",'ῥ':"ρ",'ῤ':"ρ",
			'υ':'υ','ύ':'ύ','ὺ':'ύ','ῦ':'ύ','ϋ':'ϋ',
			'ΰ':'ΰ','ῢ':'ΰ','ῧ':'ΰ','ὑ':'υ','ὕ':'ύ',
			'ὓ':'ύ','ὗ':'ύ','ὐ':'υ','ὔ':'ύ','ὒ':'ύ',
			'ὖ':'ύ',
			'ω':'ω','ῳ':'ω','ώ':'ώ','ῴ':'ώ','ὼ':'ώ',
			'ῲ':'ώ','ῶ':'ώ','ῷ':'ώ','ὡ':'ω','ᾡ':'ω',
			'ὥ':'ώ','ᾥ':'ώ','ὣ':'ώ','ᾣ':'ώ','ὧ':'ώ',
			'ᾧ':'ώ','ὠ':'ω','ᾠ':'ω','ὤ':'ώ','ᾤ':'ώ',
			'ὢ':'ώ','ᾢ':'ώ','ὦ':'ώ','ᾦ':'ώ',

			'Α':'Α','ᾼ':'Α','Ά':"Ά",'Ὰ':"Ά",'Ἁ':'Α',
			'ᾉ':'Α','Ἅ':"Ά",'ᾍ':"Ά",'Ἃ':"Ά",'ᾋ':"Ά",
			'Ἇ':"Ά",'ᾏ':"Ά",'Ἀ':'Α','ᾈ':'Α','Ἄ':"Ά",
			'ᾌ':"Ά",'Ἂ':"Ά",'ᾊ':"Ά",'Ἆ':"Ά",'ᾎ':"Ά",
			'Ε':'Ε','Έ':'Έ','Ὲ':'Έ','Ἑ':'Ε','Ἕ':'Έ',
			'Ἓ':'Έ','Ἐ':'Ε','Ἔ':'Έ','Ἒ':'Έ',
			'Η':'Η','ῌ':'Η','Ή':'Ή','Ὴ':'Ή','Ἡ':'Η',
			'ᾙ':'Η','Ἥ':'Ή','ᾝ':'Ή','Ἣ':'Ή','ᾛ':'Ή',
			'Ἧ':'Ή','ᾟ':'Ή','Ἠ':'Η','ᾘ':'Η','Ἤ':'Ή',
			'ᾜ':'Ή','Ἢ':'Ή','ᾚ':'Ή','Ἦ':'Ή','ᾞ':'Ή',
			'Ι':'Ι','Ί':"Ί",'Ὶ':"Ί",'Ϊ':"Ϊ",'Ἱ':'Ι',
			'Ἵ':"Ί",'Ἳ':"Ί",'Ἷ':"Ί",'Ἰ':'Ι','Ἴ':"Ί",
			'Ἲ':"Ί",'Ἶ':"Ί",
			'Ο':'Ο','Ό':"Ό",'Ὸ':"Ό",'Ὁ':'Ο','Ὅ':"Ό",
			'Ὃ':"Ό",'Ὀ':'Ο','Ὄ':"Ό",'Ὂ':"Ό",
			'Ρ':'Ρ','Ῥ':'Ρ',
			'Υ':'Υ','Ύ':'Ύ','Ὺ':'Ύ','Ϋ':'Ϋ','Ὑ':'Υ',
			'Ὕ':'Ύ','Ὓ':'Ύ','Ὗ':'Ύ',
			'Ω':'Ω','ῼ':'Ω','Ώ':"Ώ",'Ὼ':"Ώ",'Ὡ':'Ω',
			'ᾩ':'Ω','Ὥ':"Ώ",'ᾭ':"Ώ",'Ὣ':"Ώ",'ᾫ':"Ώ",
			'Ὧ':"Ώ",'ᾯ':"Ώ",'Ὠ':'Ω','ᾨ':'Ω','Ὤ':"Ώ",
			'ᾬ':"Ώ",'Ὢ':"Ώ",'ᾪ':"Ώ",'Ὦ':"Ώ",'ᾮ':"Ώ",
			}
		self.ελληνικά_γράμματα = list("ςερτυθιοπασδφγηξκλζχψωβνμςΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜ")
		self.ελληνικά_γράμματα += list("έύίόάήώΈΎΊΌΆΉΏ")
		self.ελληνικά_γράμματα += list("ϋϊΰΐΫΪ")
		self.ελληνικά_γράμματα += list(self.μονοτονικά.keys())
		
	def μονοτονιστής(self, λέξη):
		νέα_λέξη = []
		for λ in λέξη:
			if λ in self.μονοτονικά:
				νέα_λέξη.append(self.μονοτονικά[λ])
			elif λ in self.ελληνικά_γράμματα:
				νέα_λέξη.append(λ)
			else:
				print("ΣΦΑΛΜΑ:",λ)
		return "".join(νέα_λέξη)
	
	def έλεγχος(self, λέξη):
		νέα_λέξη = []
		for λ in λέξη:
			if λ in self.αντιστοιχίες:
				νέα_λέξη.append(self.αντιστοιχίες[λ])
			elif λ in self.ελληνικά_γράμματα:
				νέα_λέξη.append(λ)
			else:
				print("ΣΦΑΛΜΑ:",λ)
		return "".join(νέα_λέξη)
	
	def κεφαλαία(self,λέξη):
		νέα_λέξη = self.ατονιστής(λέξη)
		return νέα_λέξη.lower().swapcase()
		
	def ατονιστής(self, parts):
		l = 0-len(parts)
		i = -1
		τόνος = 0
		parts= list(parts)
		while i>=l:
			if (i)>l and (parts[i] in "ιυ" and parts[i-1] in "έόά"):#ου,ει,οι,αι
				parts[i-1] = self.τόνο_άτονο[parts[i-1]]
				if parts[i]=="υ":
					parts[i]="ϋ"
				elif parts[i]=="ι":
					parts[i]="ϊ"
				i-=1
			elif parts[i] in self.τόνο_άτονο.keys():
				parts[i] = self.τόνο_άτονο[parts[i]]
			i -= 1
		return "".join(parts)
		
	def εύρεση_τόνου(self, parts):
		l = 0-len(parts)-1
		i = -1
		συλλαβή = 0
		τόνοι_συλλαβές = []
		τόνος = []
		while i>l:
			if (i-1)>l and (parts[i] in "ιυ" and parts[i-1] in "εοα"):#ου,ει,οι,αι
				i -= 1
				συλλαβή -=1
			elif (i-1)>l and (parts[i]=="ίύ" and parts[i-1] in "εοα"):#ου,ει,οι,αι
				συλλαβή -=1
				τόνος = συλλαβή
				i -= 1
			elif parts[i] in "ευιοαηωϋϊ":
				συλλαβή -=1
			elif parts[i] in "έύίόάήώΰΐΈΎΊΌΆΉΏ":
				συλλαβή -=1
				τόνοι_συλλαβές.append(συλλαβή)
				τόνος.append("οξεία")
			elif parts[i] in "ῦῖᾶῆῶῧῗ":
				συλλαβή -=1
				τόνοι_συλλαβές.append(συλλαβή)
				τόνος.append("περισπωμένη")
			elif parts[i] in "ὲὺὶὸὰὴὼῢῒῈῪῚῸᾺῊῺ":
				συλλαβή -=1
				τόνοι_συλλαβές.append(συλλαβή)
				τόνος.append("βαρεία")
			i -= 1
		for i in range(len(τόνοι_συλλαβές)):
			τόνοι_συλλαβές[i] = abs(τόνοι_συλλαβές[i])
			if τόνος[i]=="οξεία":
				τόνοι_συλλαβές[i] += 10
			elif τόνος[i]=="περισπωμένη":
				τόνοι_συλλαβές[i] += 20
			elif τόνος[i]=="βαρεία":
				τόνοι_συλλαβές[i] += 30
		return τόνοι_συλλαβές

	def αριθμός_συλλαβών(self, parts):
		l = 0-len(parts)-1
		i = -1
		συλλαβή = 0
		τόνος = 0
		while i>l:
			if (i-1)>l and (parts[i] in "ιυ" and parts[i-1] in "εοα"):#ου,ει,οι,αι
				i -= 1
				συλλαβή -=1
			elif (i-1)>l and (parts[i]=="ίύ" and parts[i-1] in "εοα"):#ου,ει,οι,αι
				συλλαβή -=1
				τόνος = συλλαβή
				i -= 1
			elif parts[i] in "ευιοαηωϋϊ":
				συλλαβή -=1
			elif parts[i] in "έύίόάήώΰΐ":
				συλλαβή -=1
				τόνος = συλλαβή
			i -= 1
		return συλλαβή
		
	def βάλε_τόνο(self, λέξη, τόνος):
		λέξη = self.ατονιστής(λέξη)
		l = 0-len(λέξη)-1
		i = -1
		συλλαβή = 0
		γράμματα= list(λέξη)
		τύπος = τόνος//10 # 1 οξία, 2 περισπωμένη, 3 βαρεία
		if τύπος==0:
			τύπος = 1
		τόνος = 0-τόνος % 10
		while i>l:
			if i-1>l and (γράμματα[i] in "ιυ" and γράμματα[i-1] in "εοα"):#ου,ει,οι,αι
				συλλαβή -=1
				if τόνος==συλλαβή:
					if γράμματα[i] in ["ι","υ"]:
						γράμματα[i] = self.άτονο_τόνο[τύπος][γράμματα[i]]
				i -= 1		
			elif γράμματα[i] in self.άτονο_τόνο[τύπος]:
				συλλαβή -=1
				if τόνος==συλλαβή:
					if γράμματα[i] in ["ε","ο", "α"]:
						γράμματα[i] = self.άτονο_τόνο[τύπος][γράμματα[i]]
						if γράμματα[i+1]=="ϋ":
							γράμματα[i+1]="υ"
						elif γράμματα[i+1]=="ϊ":
							γράμματα[i+1]="ι"
					elif γράμματα[i] in self.άτονο_τόνο[τύπος]:
						γράμματα[i] = self.άτονο_τόνο[τύπος][γράμματα[i]]
			i -= 1
		return "".join(γράμματα)
	
	def απλοποιητής(self, λέξη):
		απλοποιημένη_λέξη = []
		λέξη = self.ατονιστής(λέξη.lower())
		μέγεθος = len(λέξη)
		if μέγεθος ==0:
			return απλοποιημένη_λέξη
		
		ν = 0
		γράμμα = λέξη[0]
		while ν < μέγεθος:
			if μέγεθος>ν and λέξη[ν] == λέξη[ν-1]:
				pass
			elif μέγεθος>ν and λέξη[ν:ν+2] == λέξη[ν-2:ν]:
				pass
				ν+=1
			elif λέξη[ν:ν+2] in self.απλοποιήσεις[2]:
				απλοποιημένη_λέξη.append(self.απλοποιήσεις[2][λέξη[ν:ν+2]])
				ν+=1
			elif λέξη[ν] in self.απλοποιήσεις[1]:
				απλοποιημένη_λέξη.append(self.απλοποιήσεις[1][λέξη[ν]])
			else:
				απλοποιημένη_λέξη.append(λέξη[ν])
			ν += 1
		
		return "".join(απλοποιημένη_λέξη)
